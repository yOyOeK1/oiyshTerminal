

# /emulator -avd '5.1_WVGA_API_26' -writable-system
# in termux to make tunel
# ssh -R 10880:127.0.0.1:1880 192.168.43.1 -p 2222
# or to me on dell
# ssh -R 10880:0.0.0.0:1880 yoyo@192.168.43.220 -p 2222

echo "---------------------------
Postinst of yss otdm-node-red-installer
-----------------------------"
echo "whoami:"`whoami`
echo "path:"${PATH}

echo "getting tmp file ..."
tFile=`mktemp`
echo "checking os type ..."
/data/data/com.termux/files/usr/bin/otdmTools.py -osType '?' -oFile $tFile

echo "reading ....os info ...."
rOs=`cat $tFile | jq -r '.os'`
rLike=`cat $tFile | jq -r '.like'`
rVer=`cat $tFile | jq -r '.ver'`
cat $tFile | jq '.'



echo "start main init event -----------------"

if [ ${rOs} = "termux" ]
then
  echo "It's Termux will use debian path...."
  rLike="debian"
fi


if [ ${rLike} = "debian" ]
then

  isOldTermux="1"

  echo "  debianish system...."
  echo "  assuming that nodejs is done ...."
  echo "  setting up configs for nodejs....."
  npm config -g set cache "/data/data/com.termux/files/home/.npmMy" -g
  npm config set registry https://registry.npmmirror.com
  npm cache verify -g
  npm cache clear --force


  if [ ${isOldTermux} = "1" ]; then
    #npm i -g npm@8.19.1
    echo "npm update ? skip....."
  else
    echo "termux version TODO"
    #proot --link2symlink npm i -g npm@8.19.1
  fi


  if [ ${rOs} = "termux" ]
  then
    l="termux node-red node-red-dashboard node-red-node-mysql"
  else
    l="termux node-red@2.1.5 node-red-dashboard node-red-node-mysql"
  fi

  for i in $l
  do
    insSta=`npm list -g | grep ${i} > /dev/null; echo $?`
    if [ ${insSta} = "1" ]
    then
      echo "- installing ["$i"]"
      if [ ${isOldTermux} = "1" ]; then
        npm i -g "$i"
      else
        echo "termux version TODO installisg "$i
        #proot --link2symlink npm i -g "$i"
      fi

    else
      echo "- skipping is in system.... [${i}]"
    fi

  done

  #if [ `which ls` = '0' ]; then echo 1; fi
  export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/data/data/com.termux/files/usr/bin"
  echo "which node-red returns ......."

  #if [ $rOs = "termux" ]; then

  #fi


  which node-red
  nrS=`which node-red > /dev/null; echo $?`
  echo " is it done ? ["${nrS}"]"
  if [ ${nrS} = "0" ]
  then
    echo " OK perfecto OK"

    if [ ${rOs} = "Ubuntu" ]
    then
      echo "Ubuntuish so lets do systemd service ...."
      cp "/data/data/com.termux/files/home/.otdm/node-red-installer/systemd.service" "/etc/systemd/system/otdm-node-red.service"
      echo "  reload systemd ..."
      systemctl daemon-reload
      echo "  make it enable ...[otdm-node-red.service]"
      systemctl enable otdm-node-red
      echo "  start ...[otdm-node-red.service]"
      systemctl start otdm-node-red

      echo "... waiting for node-red to start...."
      sleep 1
      wget "http://localhost:1880/" -O /dev/null > /dev/null
      if [ $? = "0" ]
      then
        echo "Node-red is UP!"
        echo "to be shure 5 sec more ..."
        sleep 5

      else
        echo "... waiting for node-red to start...."
        sleep 5
        wget "http://localhost:1880/" -O /dev/null > /dev/null
        if [ $? = "0" ]
        then
          echo "Node-red is UP!"
          echo "to be shure 5 sec more ..."
          sleep 5
        fi


      fi # $? != "0"

    elif [ ${rOs} = "termux" ]
    then
      echo "Need to make termux service stuff for Node-red to be a service..."

      echo "setting up services files ....."
      sD=$PREFIX/var/service/
      echo "service directory path ..."${sD}
      if [ -d ${sD}node-red ]
      then
        echo "skip is there..."
      else
        echo "can make error now ....."
        set +e
        mkdir -p ${sD}node-red/log
        ln -sf $PREFIX/share/termux-services/svlogger ${sD}node-red/log/run
        set -e
        echo "no more error now ....."
        echo '#!/data/data/com.termux/files/usr/bin/sh
      exec node-red 2>&1 >> /dev/null' > ${sD}node-red/run
        chmod +x ${sD}node-red/run
      fi

      ls ${sD}node-red

      echo "can make error now ....."
      set +e


      echo "will wait 5 sec. for sv to pick up...."
      sleep 5
      cd /data/data/com.termux/files/home

      export SVDIR=/data/data/com.termux/files/usr/var/service
      . /data/data/com.termux/files/usr/etc/profile
      source /data/data/com.termux/files/usr/etc/profile.d/start-services.sh
      echo "restart service ...."
      #sv enable node-red
      echo "sv down node-red"
      ${SHELL} -c 'proot sv down node-red'
      sleep 1

      echo "sv-enable node-red"
      ${SHELL} -c 'proot sv-enable node-red'
      sleep 1

      echo "sv up node-red"
      ${SHELL} -c 'proot sv up node-red'
      sleep 1

      echo "if all was fine node-red is at :1880"
      echo "waiting for node-red to start ....."
      sleep 5
      set +e
      wget http://127.0.0.1:1880 -O /dev/null > /dev/null
      if [ $? = "0" ]
      then
        echo "Node-RED is UP!"
        echo "Still wait 5 sec more ..."
        sleep 5
        echo "resum ....."
      else
        echo "no response frome node-red as a service.."
      fi


    fi


  fi


  echo " DONE DONE"


else
  echo "This is unknows system ....."
  echo ${tFile}
  echo "Send info to project github issue......."
fi

echo "DONE with main init event -----------------"
